type WritingTemplate {
  title: String!
  description: String!
  id: Int!
  userId: Int!
  fields: [WritingTemplateField!]!
}

type WritingTemplateField {
  name: String!
  description: String!
  type: FieldType!
}

type WritingEntry {
  id: Int!
  userId: Int!
  templateId: Int!
  fields: [WritingEntryField!]!
}

type WritingEntryField {
  name: String!
  value: FieldValue
}

union FieldValue = TextValue | NumberValue | ImageValue | VideoValue

type TextValue {
  text: String!
}

type NumberValue {
  number: Float!
}

type ImageValue {
  url: String!
}

type VideoValue {
  url: String!
}

type User {
  id: Int!
  username: String!
}

type Query {
  entries: [WritingEntry!]!
  templates: [WritingTemplate!]!
  writingTemplate(id: Int!): WritingTemplate
}

input NewUser {
  username: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

input RefreshTokenInput {
  token: String!
}

input NewWritingTemplate {
  title: String!
  description: String!
  fields: [NewWritingTemplateField!]!
}

input NewWritingTemplateField {
  name: String!
  description: String!
  type: FieldType!
}

input NewWritingEntry {
  fields: [NewWritingEntryField!]!
  templateId: Int!
}

input NewWritingEntryField {
  name: String!
  type: FieldType!
  text: String
  number: Float
  url: String
}

enum FieldType {
  TEXT
  NUMBER
  IMAGE
  VIDEO
}

type Mutation {
  createWritingEntry(input: NewWritingEntry!): WritingEntry!
  createWritingTemplate(input: NewWritingTemplate!): Int!
  createUser(input: NewUser!): String!
  login(input: Login!): String!
  refreshToken(input: RefreshTokenInput!): String!
}
