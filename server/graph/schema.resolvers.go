package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"

	"github.com/AfsanehHabibi/neveshtedan/graph/model"
)

func (r *mutationResolver) CreateWritingEntry(ctx context.Context, input model.NewWritingEntry) (*model.WritingEntry, error) {
	return r.M.CreateWritingEntry(ctx, input)
}

func (r *mutationResolver) CreateWritingTemplate(ctx context.Context, input model.NewWritingTemplate) (int, error) {
	return r.M.CreateWritingTemplate(ctx, input)
}

func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (string, error) {
	return r.M.CreateUser(ctx, input)
}

func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	return r.M.Login(ctx, input)
}

func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	return r.M.RefreshToken(ctx, input)
}

func (r *queryResolver) Entries(ctx context.Context) ([]*model.WritingEntry, error) {
	return r.M.Entries(ctx)
}

func (r *queryResolver) Templates(ctx context.Context) ([]*model.WritingTemplate, error) {
	return r.M.Templates(ctx)
}

func (r *queryResolver) WritingTemplate(ctx context.Context, id int) (*model.WritingTemplate, error) {
	return r.M.Template(ctx, id)
}

func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
